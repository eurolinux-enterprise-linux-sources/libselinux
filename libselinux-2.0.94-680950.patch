From f792cacf833e73a61f11b61ff4c89f8b36526042 Mon Sep 17 00:00:00 2001
From: Petr Lautrbach <plautrba@redhat.com>
Date: Tue, 15 Dec 2015 22:23:39 +0100
Subject: [PATCH] libselinux-2.0.94-680950.patch

---
 include/selinux/selinux.h |  6 ++++++
 man/man8/matchpathcon.8   |  5 ++++-
 src/selinux_config.c      | 40 ++++++++++++++++++++++++++++++++++++++++
 utils/matchpathcon.c      | 13 +++++++++++--
 4 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/include/selinux/selinux.h b/include/selinux/selinux.h
index 2e2567c..d607b10 100644
--- a/include/selinux/selinux.h
+++ b/include/selinux/selinux.h
@@ -471,6 +471,12 @@ extern int selinux_getpolicytype(char **policytype);
  */
 extern const char *selinux_policy_root(void);
 
+/*
+  selinux_set_policy_root sets an alternate policy root directory path under
+  which the compiled policy file and context configuration files exist.
+ */
+extern int selinux_set_policy_root(const char *rootpath);
+
 /* These functions return the paths to specific files under the 
    policy root directory. */
 extern const char *selinux_binary_policy_path(void);
diff --git a/man/man8/matchpathcon.8 b/man/man8/matchpathcon.8
index c1b00c0..516d2eb 100644
--- a/man/man8/matchpathcon.8
+++ b/man/man8/matchpathcon.8
@@ -3,7 +3,7 @@
 matchpathcon \- get the default SELinux security context for the specified path from the file contexts configuration.
 
 .SH "SYNOPSIS"
-.B matchpathcon [-V] [-N] [-n] [-f file_contexts_file ] [-p prefix ] filepath...
+.B matchpathcon [-V] [-N] [-n] [-f file_contexts_file ] [-P policy_root_path] [-p prefix ] filepath...
 .SH "DESCRIPTION"
 .B matchpathcon
 queries the system policy and outputs the default security context associated with the filepath.
@@ -23,6 +23,9 @@ Do not use translations.
 .B \-f file_context_file
 Use alternate file_context file
 
+.B \-P policy_root_path
+Use alternate policy root path
+
 .B \-p prefix
 Use prefix to speed translations
 
diff --git a/src/selinux_config.c b/src/selinux_config.c
index e040959..5ee1d8d 100644
--- a/src/selinux_config.c
+++ b/src/selinux_config.c
@@ -8,6 +8,8 @@
 #include <limits.h>
 #include <unistd.h>
 #include <pthread.h>
+#include <errno.h>
+#include "policy.h"
 #include "selinux_internal.h"
 #include "get_default_type_internal.h"
 
@@ -135,6 +137,13 @@ int selinux_getpolicytype(char **type)
 
 hidden_def(selinux_getpolicytype)
 
+static int setpolicytype(const char *type)
+{
+	free(selinux_policytype);
+	selinux_policytype = strdup(type);
+	return selinux_policytype ? 0 : -1;
+}
+
 static char *selinux_policyroot = NULL;
 static const char *selinux_rootpath = SELINUXDIR;
 
@@ -258,6 +267,37 @@ const char *selinux_policy_root()
 	return selinux_policyroot;
 }
 
+int selinux_set_policy_root(const char *path)
+{
+	int i;
+	char *policy_type = strrchr(path, '/');
+	if (!policy_type) {
+		errno = EINVAL;
+		return -1;
+	}
+	policy_type++;
+
+	fini_selinuxmnt();
+	fini_selinux_policyroot();
+
+	selinux_policyroot = strdup(path);
+	if (! selinux_policyroot)
+		return -1;
+
+	if (setpolicytype(policy_type) != 0)
+		return -1;
+
+	for (i = 0; i < NEL; i++)
+		if (asprintf(&file_paths[i], "%s%s",
+			     selinux_policyroot,
+			     file_path_suffixes_data.str +
+			     file_path_suffixes_idx[i])
+		    == -1)
+			return -1;
+
+	return 0;
+}
+
 const char *selinux_path()
 {
 	return selinux_rootpath;
diff --git a/utils/matchpathcon.c b/utils/matchpathcon.c
index 86a7587..98961c8 100644
--- a/utils/matchpathcon.c
+++ b/utils/matchpathcon.c
@@ -12,7 +12,7 @@
 void usage(const char *progname)
 {
 	fprintf(stderr,
-		"usage:  %s [-N] [-n] [-f file_contexts] [-p prefix] [-Vq] path...\n",
+		"usage:  %s [-N] [-n] [-f file_contexts] [-P policy_root_path] [-p prefix] [-Vq] path...\n",
 		progname);
 	exit(1);
 }
@@ -51,7 +51,7 @@ int main(int argc, char **argv)
 	if (argc < 2)
 		usage(argv[0]);
 
-	while ((opt = getopt(argc, argv, "Nnf:p:Vq")) > 0) {
+	while ((opt = getopt(argc, argv, "Nnf:P:p:Vq")) > 0) {
 		switch (opt) {
 		case 'n':
 			header = 0;
@@ -79,6 +79,15 @@ int main(int argc, char **argv)
 				exit(1);
 			}
 			break;
+		case 'P':
+			if (selinux_set_policy_root(optarg) < 0 ) {
+				fprintf(stderr,
+					"Error setting policy root  %s:  %s\n",
+					optarg,
+					errno ? strerror(errno) : "invalid");
+				exit(1);
+			}
+			break;
 		case 'p':
 			if (init) {
 				fprintf(stderr,
-- 
2.6.4

