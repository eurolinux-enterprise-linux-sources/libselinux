diff --git a/libselinux/src/matchpathcon.c b/libselinux/src/matchpathcon.c
index da5cab9..25a68a7 100644
--- a/libselinux/src/matchpathcon.c
+++ b/libselinux/src/matchpathcon.c
@@ -395,7 +395,7 @@ int selinux_file_context_verify(const char *path, mode_t mode)
 	rc = lgetfilecon_raw(path, &con);
 	if (rc == -1) {
 		if (errno != ENOTSUP)
-			return 1;
+			return -1;
 		else
 			return 0;
 	}
@@ -405,7 +405,7 @@ int selinux_file_context_verify(const char *path, mode_t mode)
 
 	if (selabel_lookup_raw(hnd, &fcontext, path, mode) != 0) {
 		if (errno != ENOENT)
-			rc = 1;
+			rc = -1;
 		else
 			rc = 0;
 	} else
diff --git a/libselinux/utils/matchpathcon.c b/libselinux/utils/matchpathcon.c
index 4453a88..86a7587 100644
--- a/libselinux/utils/matchpathcon.c
+++ b/libselinux/utils/matchpathcon.c
@@ -103,48 +103,54 @@ int main(int argc, char **argv)
 		}
 	}
 	for (i = optind; i < argc; i++) {
-		int mode = 0;
+		int rc, mode = 0;
 		struct stat buf;
+        char *path = argv[i];
 		int len = strlen(argv[i]);
-		if (len > 1  && argv[i][len - 1 ] == '/') {
-			argv[i][len - 1 ] = '\0';
+		if (len > 1 && path[len - 1 ] == '/') {
+			path[len - 1 ] = '\0';
 		}
 
-		if (lstat(argv[i], &buf) == 0)
+		if (lstat(path, &buf) == 0)
 			mode = buf.st_mode;
 
 		if (verify) {
+            rc = selinux_file_context_verify(path, mode);
+
 			if (quiet) {
-				if (selinux_file_context_verify(argv[i], mode))
+				if (rc == 1)
 					continue;
 				else
 					exit(1);
 			}
-			if (selinux_file_context_verify(argv[i], mode)) {
-				printf("%s verified.\n", argv[i]);
+
+			if (rc == -1) {
+                printf("%s error: %s\n", path, strerror(errno));
+                exit(1);
+            } else if (rc == 1) {
+				printf("%s verified.\n", path);
 			} else {
 				security_context_t con;
-				int rc;
 				error = 1;
 				if (notrans)
-					rc = lgetfilecon_raw(argv[i], &con);
+					rc = lgetfilecon_raw(path, &con);
 				else
-					rc = lgetfilecon(argv[i], &con);
+					rc = lgetfilecon(path, &con);
 
 				if (rc >= 0) {
 					printf("%s has context %s, should be ",
-					       argv[i], con);
-					printmatchpathcon(argv[i], 0, mode);
+					       path, con);
+					printmatchpathcon(path, 0, mode);
 					freecon(con);
 				} else {
 					printf
 					    ("actual context unknown: %s, should be ",
 					     strerror(errno));
-					printmatchpathcon(argv[i], 0, mode);
+					printmatchpathcon(path, 0, mode);
 				}
 			}
 		} else {
-			error |= printmatchpathcon(argv[i], header, mode);
+			error |= printmatchpathcon(path, header, mode);
 		}
 	}
 	matchpathcon_fini();
